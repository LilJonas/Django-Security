[DEFAULT]
Index = Bienvenue dans l'application Vulnerable Django. Les exemples sont une présentation de base des vulnérabilités de sécurité couramment trouvées dans les applications Web. <br><br>Chaque page contient des exemples et des informations importantes sur la vulnérabilité.
BruteForce = Un exemple simple d'une forme Brute Force-capable. <br><br>Ne protège pas contre un trop grand nombre de tentatives de mot de passe.<br><br> <b>Remédiation :</b> <ul> <li>Mettre en place des mécanismes de verrouillage de compte après un certain nombre de tentatives de connexion infructueuses.</li> <br> <li>Appliquez des politiques de mots de passe solides, y compris des exigences de longueur et de complexité minimales. </li> <br> <li>Implémentez des mécanismes de limitation de débit ou CAPTCHA pour empêcher les attaques automatisées par force brute. </li> </ul>
CommandExec = Ce formulaire ne vous empêche pas d'envoyer vos propres commandes au serveur Web. <br><br>Exemple : www.google.com | dir <br><br>Cela indiquera au serveur Windows d'envoyer un ping à www.google.com, puis d'exécuter la commande dir.<br><br> <b>Remédiation :</b> <ul> <li>Évitez d'exécuter des commandes fournies par l'utilisateur directement sur le serveur.</li> <br> <li>Mettez en œuvre la validation et le nettoyage des entrées pour empêcher l'injection de commandes malveillantes. </li> <br> <li>Utilisez des méthodes ou des API sûres et prédéfinies pour exécuter des commandes en toute sécurité. </li> </ul>
CSRF = The view uses a csrf_exempt decorator to tell Django that we're bypassing the CSRF protections that are enabled in Django by default.<br><br> <b>Remediation :</b> Update the application by adding support of anti-CSRF tokens on this login form. Most web frameworks provide either built-in solutions or have plugins that can be used to easily add these tokens to any form.'
FileInclusion = Ce programme exécute les fichiers qui lui sont donnés dans une requête GET.<br><br>La sortie est affichée sous la liste des fichiers.<br><br>Il ne protège pas contre l'inclusion de votre propre fichier, ou d'un autre fichier sur le serveur, dans la requête GET.<br><br> <b>Remédiation :</b><ul> <li>Évitez d'inclure ou d'exécuter directement des fichiers fournis par l'utilisateur.</li> <br> <li>Validez et nettoyez l'entrée de fichier, en vous assurant que seuls les fichiers autorisés sont accessibles. </li> <br> <li>Implémentez une approche basée sur une liste blanche, permettant uniquement l'inclusion ou l'exécution de fichiers spécifiques. </li> </ul>
SQLi = Ce formulaire ne protège pas contre les attaques par injection SQL.<br><br>Cela vous permettra d'énumérer tous les utilisateurs en saisissant ce qui suit :<br>admin" OR "1"="1<br><br>Cela ferait l'intégralité de l'instruction SQL : <br>SELECT * from "auth_user" WHERE "auth_user"."username" = "admin" OR "1"="1"'<br><br> <b>Remédiation :</b><ul> <li>Utilisez des requêtes paramétrées ou des instructions préparées pour empêcher les attaques' par injection SQL.</li> <br> <li>Implémentez la validation et le nettoyage des entrées pour empêcher les requêtes SQL malveillantes. </li> <br> <li>Évitez de concaténer les valeurs fournies par l'utilisateur directement dans les instructions SQL. </li> </ul>
XSSs = Ce programme ne protège pas contre la saisie de code HTML par l'utilisateur, y compris les balises de script.<br><br>Cela vous permettra d'intégrer du javascript dans la page.<br><br> <b>Remédiation :</b><ul> <li>Implémentez l'encodage ou l'échappement de la sortie pour empêcher l'injection HTML/JavaScript.</li> <br> <li>Utilisez des méthodes de codage contextuelles appropriées pour différents contextes de sortie (HTML, JavaScript, etc.).</li> <br> <li>Appliquez la validation et le nettoyage des entrées pour empêcher le stockage ou l'affichage d'entrées malveillantes. </li> </ul>